/**
 * Tasks to build the Software Requirements Specification
 *
 * @author Joshua Gleitze
 */
 
task srs(type: Exec) {
	description 'Renders the Requirements Specification.'
	
	inputs.dir "$projectDir/doc/Requirements Specification"
	outputs.file "$buildDir/doc/Requirements Specification.pdf"
	
	def dest = file("$buildDir/doc/")
	def logdest = file("$buildDir/reports/Requirements Specification Render.log")
	
	workingDir "$projectDir/doc/Requirements Specification/"
	
	switch (System.getProperty('os.name').toLowerCase().split()[0]) {
		case 'windows':
			commandLine 'cmd', '/c', 'Render.bat', dest, logdest, 'srs-only'
    	break
		case 'linux':
			args dest, logdest, 'srs-only'
    		executable './Render.sh'
    		break
	}
	
	doFirst {
		if (!System.getProperty('os.name').toLowerCase().contains('linux') && !System.getProperty('os.name').toLowerCase().contains('windows')) {
    		throw new Exception('Sorry, we donâ€™t support your operating system for building the SRS!')
		}
	}
	
	// only print the output for log level info or higher
	logging.captureStandardOutput LogLevel.INFO
}

task srsinstall(type: Exec) {
	description 'Sets up the environment for rendering the srs, but only if the srs is out of date.'	
	
	inputs.dir "$projectDir/doc/Requirements Specification"
	outputs.file "$buildDir/doc/Requirements Specification.pdf"
	
	doFirst {
		if (!System.getProperty('os.name').toLowerCase().contains('linux')) {
			throw new Exception('Sorry, we only support linux for automatic setup of the srs render environment. Please refer to doc/Development Setup.md!')
		}
	}
	
	workingDir "$projectDir/doc/Requirements Specification/"
	executable './Install.sh'
	
	// only print the output for log level info or higher
	logging.captureStandardOutput LogLevel.INFO
	logging.captureStandardError LogLevel.INFO
}

build.dependsOn srs
