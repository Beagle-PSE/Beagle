#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass sdqthesis
\use_default_options true
\master ../Design.lyx
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Architectural Overview
\end_layout

\begin_layout Standard
The architectural overview summarizes Beagle's software design, that follows
 the Software Requirement Specification (SRS).
 Beagle's design decisions are mainly proposed to fulfil all mandatory tasks
 mentioned in the SRS, but also allows supplementing by optional criteria.
 However, some mandatory criteria have changed, concerning the Common Trace
 API (CTA) (/B10/, /F30/, /F40/, /Q20/).
 The CTA will not be used by Beagle any more, because it cannot conduct
 as precise measurements as desired.
 That leads to a direct dependency from Beagle's Measurement Controller
 to the measurement software Kieker – without the CTA as intermediary.
\end_layout

\begin_layout Standard
The following chapter is divided into 4 sub-chapters:
\end_layout

\begin_layout Itemize
1.1 Gives a short overview of Beagle's entire system, briefly presenting
 the whole design ideas as well as the subsystem structure and its out-most
 functionality.
\end_layout

\begin_layout Itemize
1.2 Completes the internal description of Beagle's system from 1.1, describing
 the interaction of subsystem components.
\end_layout

\begin_layout Itemize
1.3 Describes the communication process between Beagle and external tools
 such as measurement software or analyser software.
\end_layout

\begin_layout Itemize
1.4 Explains why some components are developed as Eclipse Extension Points.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Architectual Overview 
\end_layout

\begin_layout Plain Layout
- Overview of the whole system
\end_layout

\begin_layout Plain Layout
- Description of components’ interaction
\end_layout

\begin_layout Plain Layout
- Communication between Beagle and external tools
\end_layout

\end_inset


\end_layout

\begin_layout Section
Overview of the entire system
\end_layout

\begin_layout Standard
Beagle is divided into components that are distinguished by high-level functiona
lity and service.
 Components may depend on information provided by another component, but
 their internal logic works strictly independently.
 The composition of following components represents Beagle's architecture:
\end_layout

\begin_layout Subsubsection*
Core Component (Mediator Pattern)
\end_layout

\begin_layout Standard
In Order to manage and synchronise the requests and execution of different
 jobs, Beagle is controlled by a core component.
 The core component conducts the order of executable services, distributes
 information and is responsible for class instantiation.
 It depends on proper functionality of the other components and will offer
 a parametrised PCM at the end of a successful execution.
\end_layout

\begin_layout Subsubsection*
Measurement Tool (Can-do Pattern)
\end_layout

\begin_layout Standard
The Measurement Tool is responsible for all kind of measurements that are
 needed to get the execution time of Resource Demanding Internal Actions,
 Seff Branches and Seff Loops in regard to a certain parametrisation.
 Therefore, Kieker will be instructed by an adapter pattern.
\end_layout

\begin_layout Subsubsection*
Result Analyser (Can-do Pattern)
\end_layout

\begin_layout Standard
Based on the measurement results, the Result Analyser will suggest stochastic
 expressions that lead to a parametrisation of Resource Demanding Internal
 Actions, Seff Branches and Seff Loops.
\end_layout

\begin_layout Subsubsection*
Final Judge
\end_layout

\begin_layout Standard
This component is responsible to decide, which proposed stochastic expression
 fits best to the PCM.
 It also decides if more measurements should be done and when the final
 solution is found.
\end_layout

\begin_layout Subsubsection*
GUI (Model-View-Controller)
\end_layout

\begin_layout Standard
Actually, the GUI is not a necessary component that provides functionality
 for parametrisation.
 But it is useful for providing interaction between Beagle and the user
 as the user may want to set up some features of Beagle.
\end_layout

\begin_layout Section
Components’ interaction
\end_layout

\begin_layout Standard
The interaction of Beagle's components is guided by the Beagle Core through
 a Blackboard-Pattern.
 The blackboard contains SEFF specific information, describing what to measure,
 measurement results and stochastic expression annotations.
 Measurement Tools and Result Analysers have the possibility to decide for
 their own, whether they can contribute or not – depending on the information
 provided on the blackboard.
 Each component gets a different view of the blackboard, limiting its access
 to more than what is absolutely necessary.
 In order to unify the communication, Beagle Core provides its own classes
 (SEFF characteristics and Evaluable Expression).
 
\end_layout

\begin_layout Section
Communication between Beagle and external tools
\end_layout

\begin_layout Section
Extension Points
\end_layout

\begin_layout Standard
The 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Measurement Tools
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Result Analysers
\end_layout

\end_inset

 and the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Final Judge
\end_layout

\end_inset

 are connected to Beagle via Eclipse Extension Points.
\end_layout

\begin_layout Standard
This means they can be developed as separate eclipse plugins and specify
 in their 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

plugin.xml
\end_layout

\end_inset

 file the classes, which represent the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Measurement Tools
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Result Analysers
\end_layout

\end_inset

 or a 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Final Judge
\end_layout

\end_inset

.
 When there are multiple plugins with a 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Final Judge
\end_layout

\end_inset

, the user has to select one in the GUI.
\end_layout

\begin_layout Standard
This concept has the advantage, that everybody can write his own or select
 some existing 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Measurement Tools
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Result Analysers
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Final Judges
\end_layout

\end_inset

 and just install them into his eclipse to use them.
\end_layout

\end_body
\end_document
