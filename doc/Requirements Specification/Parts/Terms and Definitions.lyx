#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass sdqthesis
\use_default_options true
\master ../Requirements Specification.lyx
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
This file contains definitions of all terms and abbreviations.
 Note that defining a term here does not automatically include it in the
 documentâ€™s glossary.
 It has to actually be referenced somewhere to be included there.
\end_layout

\begin_layout Plain Layout

\emph on
Make sure to define any abbreviation, technical or ambiguous term!
\end_layout

\begin_layout Plain Layout
We are using user1 for genitive singular, and user2 for genitive plural
 forms.
 example:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% For glossaries documentation, refer to https://en.wikibooks.org/wiki/LaTeX/Gloss
ary#Defining_terms
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%We are using user1 for genitive singular, and user2 for genitive plural
 forms.
 
\end_layout

\begin_layout Plain Layout

%Example:
\end_layout

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout

% % The ID will be used when referencing this
\end_layout

\begin_layout Plain Layout

% 
\backslash
newglossaryentry{ID}{
\end_layout

\begin_layout Plain Layout

% 	% The entry's printed name
\end_layout

\begin_layout Plain Layout

% 	name={name},
\end_layout

\begin_layout Plain Layout

% 	% description for the glossary
\end_layout

\begin_layout Plain Layout

% 	description={
\end_layout

\begin_layout Plain Layout

% 		description
\end_layout

\begin_layout Plain Layout

% 	},
\end_layout

\begin_layout Plain Layout

% 	% Plural form, if not formed by appending an "s"
\end_layout

\begin_layout Plain Layout

% 	plural={pluralform},
\end_layout

\begin_layout Plain Layout

%     % Wort used to sort the entry, useful if name contains weird characters
\end_layout

\begin_layout Plain Layout

% 	sort={sortword},
\end_layout

\begin_layout Plain Layout

% 	% Define these only when needed:
\end_layout

\begin_layout Plain Layout

% 	user1={genitive singular form},
\end_layout

\begin_layout Plain Layout

% 	user2={genitive plural form}
\end_layout

\begin_layout Plain Layout

% } 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{SEFF condition}{
\end_layout

\begin_layout Plain Layout

	name={SEFF condition},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		conditions (like Java's  
\backslash
lstinline{if}, 
\backslash
lstinline{if}-
\backslash
lstinline{else} and 
\backslash
lstinline{switch}-
\backslash
lstinline{case} statements) which affect the calls a 
\backslash
gls{component} makes to other 
\backslash
glspl{component}.
 Such conditions are---contrary to conditions that stay within an 
\backslash
gls{internal action}---modeled in the 
\backslash
glsuseri{component} 
\backslash
gls{SEFF}.
\end_layout

\begin_layout Plain Layout

	},
\end_layout

\begin_layout Plain Layout

	user1={SEFF conditions's},
\end_layout

\begin_layout Plain Layout

	user2={SEFF conditions'}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{SEFF loop}{
\end_layout

\begin_layout Plain Layout

	name={SEFF loop},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		loops (like Java's 
\backslash
lstinline{for}, 
\backslash
lstinline{while} and 
\backslash
lstinline{do}-
\backslash
lstinline{while} statement) which affect the calls a 
\backslash
gls{component} makes to other 
\backslash
glspl{component}.
 Such loops are---contrary to loops that stay within an 
\backslash
gls{internal action}---modeled in the 
\backslash
glsuseri{component} 
\backslash
gls{SEFF}.
\end_layout

\begin_layout Plain Layout

	},
\end_layout

\begin_layout Plain Layout

	user1={SEFF loop's},
\end_layout

\begin_layout Plain Layout

	user2={SEFF loops'}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{loop action}{
\end_layout

\begin_layout Plain Layout

	name={
\backslash
lstinline{LoopAction}},
\end_layout

\begin_layout Plain Layout

	description={},
\end_layout

\begin_layout Plain Layout

	sort={LoopAction}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{component}{
\end_layout

\begin_layout Plain Layout

	name={component},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		 an artifact of a software development process with a description of its
 application.
\end_layout

\begin_layout Plain Layout

	},
\end_layout

\begin_layout Plain Layout

	user1={component's},
\end_layout

\begin_layout Plain Layout

	user2={components'}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{component-based software}{
\end_layout

\begin_layout Plain Layout

	name={component-based software},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		a software constituted of 
\backslash
glspl{component}.
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{component-based software architecture}{
\end_layout

\begin_layout Plain Layout

	name={component-based software architecture},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		a 
\backslash
gls{software architecture} utilising the concept of 
\backslash
gls{component-based software}, therefore taking advantage of the reusability
 of its parts and preserving the same for newly created 
\backslash
glspl{component}.
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{resource demand}{
\end_layout

\begin_layout Plain Layout

	name={resource demand},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		how much of a certain resource---like CPU, Network oder hard disk drive---a
 
\backslash
gls{component} needs to offer a certain functionality.
 A resource demand is ideally specified platform independently, e.g.
 by specifiying required CPU cycles, megabytes to be read, etc.
 If such information is not available, resource demands can be expressed
 platform dependend, e.g.
 in nanoseconds.
 In this case, a certain degree of portability can still be achieved if
 information about the used platforms' speed relative to each other is available.
 
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{internal action}{
\end_layout

\begin_layout Plain Layout

	name={internal action},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		sequence of commands a 
\backslash
gls{component} executes without leaving its scope (e.g.
 without calling other 
\backslash
glspl{component})
\end_layout

\begin_layout Plain Layout

	},
\end_layout

\begin_layout Plain Layout

	user2={internal actions'}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newacronym[user1=PCM's]{PCM}{PCM}{
\backslash
gls{Palladio Component Model}}
\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{Palladio Component Model}{
\end_layout

\begin_layout Plain Layout

	name={Palladio Component Model},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		a domain-specific modeling language (DSL) used by 
\backslash
gls{Palladio}.
\end_layout

\begin_layout Plain Layout


\backslash
begin{quote}It is designed to enable early performance predictions for software
 architectures and is aligned with a component-based software development
 process.
\backslash
end{quote} 
\backslash
cite{tuChemPcm}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{Palladio}{
\end_layout

\begin_layout Plain Layout

	name={Palladio},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		an approach for the definition of 
\backslash
glspl{component-based software architecture} with a special focus on performance
 properties.
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{SoMoX}{
\end_layout

\begin_layout Plain Layout

	name={SoMoX},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		a 
\backslash
gls{Palladio} plugin for static code analysis to reengineer a 
\backslash
glsuseriii{software architecture} from its source code.
 Constructs a 
\backslash
gls{PCM} instance including the reconstructed components and their 
\backslash
gls{SEFF}.
\end_layout

\begin_layout Plain Layout

	},
\end_layout

\begin_layout Plain Layout

	user1={SoMoX'}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{software architect}{
\end_layout

\begin_layout Plain Layout

	name={software architect},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		a person who planes a 
\backslash
gls{software architecture} from existing components and interfaces.
 Uses architectural styles and patterns, analyses architectural specifications,
 and makes design decisions.
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{software architecture}{
\end_layout

\begin_layout Plain Layout

	name={software architecture},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		todo
\end_layout

\begin_layout Plain Layout

	},
\end_layout

\begin_layout Plain Layout

	user3={software's architecture},
\end_layout

\begin_layout Plain Layout

	user4={softwares' architecture}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{logical architecture}{
\end_layout

\begin_layout Plain Layout

	name={logical architecture},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		describes a 
\backslash
glsuseri{system} logical partitioning into 
\backslash
glspl{layer}, 
\backslash
glspl{subsystem}, and packages, and their communication with each other.
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{deployment architecture}{
\end_layout

\begin_layout Plain Layout

	name={deployment architecture},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		describes in which hardware node each 
\backslash
gls{component} of a 
\backslash
gls{system} is deployed.
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{system}{
\end_layout

\begin_layout Plain Layout

	name={system},
\end_layout

\begin_layout Plain Layout

	user1={system's},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		(usually) reflects the organizational structure that built it.
 (Conway's law) 
\backslash
cite{conwaysLaw}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newacronym{CTA}{CTA}{
\backslash
gls{Common Trace API}}
\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{Common Trace API}{
\end_layout

\begin_layout Plain Layout

	name={Common Trace API},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		an API developed by NovaTec GmbH for measuring the time, specific code
 sections need to be executed.
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{subsystem}{
\end_layout

\begin_layout Plain Layout

	name={subsystem},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		a self-contained 
\backslash
gls{system} within a larger 
\backslash
gls{system}.
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{layer}{
\end_layout

\begin_layout Plain Layout

	name={layer},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		describes conceptual separation in software.
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{tier}{
\end_layout

\begin_layout Plain Layout

	name={tier},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		consists of a server or group of servers.
 Tiers are physically separated from each other.
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{component developer}{
\end_layout

\begin_layout Plain Layout

	name={component developer},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		builds composite 
\backslash
glspl{component}, specifies 
\backslash
glspl{component}, interfaces, and data types, and specifies data types.
 Creates 
\backslash
glspl{service effect specification}, stores modelling and implementation
 artecfacts in repositories, and implements, tests, and maintains 
\backslash
glspl{component}.
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newacronym{SEFF}{SEFF}{
\backslash
gls{service effect specification}}
\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{service effect specification}{
\end_layout

\begin_layout Plain Layout

	name={service effect specification},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		describes the inner behaviour of a 
\backslash
gls{component} on a highly abstract level by specifying the relationship
 between provided and required services of a component.
  
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{system deployer}{
\end_layout

\begin_layout Plain Layout

	name={system deployer},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		models the resource environments and allocations of 
\backslash
glspl{component} to resources.
 Also sets up the resource environments, deploys components onto resources,
 and maintains the running system.
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{Kieker}{
\end_layout

\begin_layout Plain Layout

	name={Kieker},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{quote}
\end_layout

\begin_layout Plain Layout

			a Java-based application performance monitoring and dynamic software
 analysis framework.
\end_layout

\begin_layout Plain Layout

		
\backslash
end{quote}
\backslash
cite{KiekerPaper}
\end_layout

\begin_layout Plain Layout

		A 
\backslash
gls{measurement software} Beagle aims to support.
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newglossaryentry{measurement software}{
\end_layout

\begin_layout Plain Layout

	name={measurement software},
\end_layout

\begin_layout Plain Layout

	description={
\end_layout

\begin_layout Plain Layout

		software capable of measuring the time, given source code needs to execute
 some task.
 The software's results are usually returned in a time unit like nanoseconds.
 Beagles interactes with such software through the 
\backslash
gls{CTA} and uses it to find 
\backslash
glspl{resource demand}.
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
