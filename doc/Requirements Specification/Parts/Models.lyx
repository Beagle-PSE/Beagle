#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass sdqthesis
\use_default_options true
\master ../Requirements Specification.lyx
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Models
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Concludes the SRS.
 At his points, the software is completely specified in regards of requirements
 and attribute descriptions.
\end_layout

\begin_layout Plain Layout
This final chapter now models different viewpoints on how an implementation
 might look like.
 Itâ€™s meant to convey our vision of the software to the reader.
 It is also meant to specify this vision, such that it can lead us through
 the further development phases.
 It does not yet specify technical realizations like like UML class diagrams.
\end_layout

\begin_layout Plain Layout
The chapter should contain:
\end_layout

\begin_layout Plain Layout
* Use case descriptions
\end_layout

\begin_layout Plain Layout
* Sencario descriptions
\end_layout

\begin_layout Plain Layout
* User interface draft (not necessarily a drawn one, attribute specifications
 are fine, too)
\end_layout

\end_inset


\end_layout

\begin_layout Section
Scenario
\end_layout

\begin_layout Standard
Imagine
\begin_inset Note Note
status open

\begin_layout Plain Layout
all the people, living life in peace! (You-hu) You may say I'm a dreamer,
 but I'm not the only one.
 I hope one day you'll join us and the world will be as one.
\end_layout

\end_inset

, that a Java based online shop is running on a middle-class web server
 of a company named 
\begin_inset Quotes eld
\end_inset

EmmaSun
\begin_inset Quotes erd
\end_inset

.
 During the first few years the software could deal with almost 99.9% of
 the requests and orders that are handled quite well without any delay.
 After an enormous expansion since the last year, the user numbers are currently
 growing for about 5 percent each week.
 Although the current servers are designed to fulfil a distinctly higher
 amount of user requests, the administration reported some few dropouts
 as well as increasing waiting times in single applications.
 Unfortunately, the software is based on an early design that has grown
 over years with missing documentation in many cases.
 The effort to re-write the complete software is an impossible act.
 The only solution is, to reanalyse the software's source code and hopefully
 find any bottlenecks that can be repaired with lesser effort.
 But reanalysing source code is also a quite unmanageable task.
 So at this point, Beagle is used.
\end_layout

\begin_layout Standard
Beagle helps the team of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{software architect}
\end_layout

\end_inset

 that was commissioned by EmmaSun to analyse the whole software.
 As Beagle depends on a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{PCM}
\end_layout

\end_inset

, the architects use the reversed-engineering plug-in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SoMoX}
\end_layout

\end_inset

 to create a valid 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{PCM}
\end_layout

\end_inset

 including all software 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{component}
\end_layout

\end_inset

 and their 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{SEFF}
\end_layout

\end_inset

.
 Providing Beagle a monitoring software named 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Kieker}
\end_layout

\end_inset

, that matches the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Common Trace API}
\end_layout

\end_inset

, Beagle starts with conducting measurements on single software 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{component}
\end_layout

\end_inset

, extending the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{PCM}
\end_layout

\end_inset

.
 After around 6 hours of measuring, the results of measuring are added into
 the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{PCM}
\end_layout

\end_inset

 and Beagle calls 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Palladio}
\end_layout

\end_inset

 to do a performance prediction.
 The prediction indicates an architectural violation of some software 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{component}
\end_layout

\end_inset

, that lead to a a huge amount of sub-function calls through hierarchical
 layers.
\end_layout

\begin_layout Standard
The software architects decide to add an extra cache, that can store the
 results of the sub-function calls and make them available immediately.
 Fortunately, before they turn this idea into reality, they can adopt this
 design decision into the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{PCM}
\end_layout

\end_inset

.
 The little changes in the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{PCM}
\end_layout

\end_inset

 lead to a much better performance prediction and the software architects
 agree to reimplement the new design.
\end_layout

\end_body
\end_document
