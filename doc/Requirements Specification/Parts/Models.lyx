#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass sdqthesis
\use_default_options true
\master ../Requirements Specification.lyx
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Models
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Concludes the SRS.
 At his points, the software is completely specified in regards of requirements
 and attribute descriptions.
\end_layout

\begin_layout Plain Layout
This final chapter now models different viewpoints on how an implementation
 might look like.
 Itâ€™s meant to convey our vision of the software to the reader.
 It is also meant to specify this vision, such that it can lead us through
 the further development phases.
 It does not yet specify technical realizations like like UML class diagrams.
\end_layout

\begin_layout Plain Layout
The chapter should contain:
\end_layout

\begin_layout Plain Layout
* Use case descriptions
\end_layout

\begin_layout Plain Layout
* Sencario descriptions
\end_layout

\begin_layout Plain Layout
* User interface draft (not necessarily a drawn one, attribute specifications
 are fine, too)
\end_layout

\end_inset


\end_layout

\begin_layout Section
Scenario 1
\end_layout

\begin_layout Standard
EmmaSun, a Java based online shop is running on a middle-class web server.
 During the first few years the software could deal with almost 99.9% of
 its requests and orders, which were always handled quite well and without
 any delay.
 After an enormous expansion since the last year, the user numbers are currently
 growing for about 5% each week.
 Although the current servers are designed to fulfil a distinctly higher
 amount of user requests, the administration reported some few dropouts
 as well as increasing waiting times in single applications.
 Unfortunately, the software is based on an early design that has grown
 over years with missing documentation in many cases.
 The effort to re-write the complete software is unbearable.
 The code also scales bad, so buying new servers will not solve the problem
 either.
 The only solution seems to re-analyse the software's source code and architectu
re to hopefully find the bottlenecks that can be repaired with least effort.
 EmmaSun's developers have heard of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Palladio}
\end_layout

\end_inset

 and think it could serve them well to overcome their issues.
 Unfortunately, modelling all existing code is such a huge task that the
 management is reluctant to take this step.
\end_layout

\begin_layout Standard
At this point, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Beagle}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SoMoX}
\end_layout

\end_inset

 come into play.
 The team of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{software architect}
\end_layout

\end_inset

 that was commissioned by EmmaSun start to reverse-engineer a complete 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{PCM}
\end_layout

\end_inset

 instance modelling all software 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{component}
\end_layout

\end_inset

 and their 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{SEFF}
\end_layout

\end_inset

 using 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SoMoX}
\end_layout

\end_inset

.
 In conjunction with 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Kieker}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Beagle}
\end_layout

\end_inset

 is then used to conduct measurements on the software's 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{component}
\end_layout

\end_inset

, adding resource demand information to the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{PCM}
\end_layout

\end_inset

.
 After less than two days, the team is able to analyse its software with
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Palladio}
\end_layout

\end_inset

 and run performance predictions for various improvements.
 The analysis reveals an architectural violation of some software 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{component}
\end_layout

\end_inset

, that lead to a a huge amount of inter-component calls throughout various
 hierarchical layers.
\end_layout

\begin_layout Standard
After revising several improvement approaches, EmmaSun's software architects
 decide to add an extra cache which can store the results of most external
 calls and makes them available immediately.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Glsuseri{Palladio}
\end_layout

\end_inset

 predictions suggest that little changes in the software's architecture
 adopting these changes will lead to a much better performance.
 The software architects agree to implement the new design.
\end_layout

\begin_layout Standard
After a two weeks, EmmaSun can already publish first improvements that improve
 the shop's performance.
 The development team continues to use Palladio to model and plan their
 software's architecture, leading to further improvements in its code quality
 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{QoS}
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Scenario 2
\end_layout

\begin_layout Standard
Two years later, EmmaSun emerged to be an established and much used online
 shop.
 The last years were busy and EmmaSun constantly hired new developers and
 deployed its software on an ever growing compound of servers.
 Because of its good experience with 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Palladio}
\end_layout

\end_inset

, EmmaSun's software architects never stopped to model their software in
 it.
 Because of this, the software's architecture became more and more sophisticated
, increasing EmmaSun's 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{QoS}
\end_layout

\end_inset

 along the way.
\end_layout

\begin_layout Standard
Today, EmmaSun's managers decided to offer a new, ground-braking feature:
 Automatic audio conversion.
 For any audio piece, no matter whether it's sold on CD, tape or LP will
 automatically be offered to the user in various digital music formats,
 from high quality FLAC to small 128 kbit/s MP3.
 While the management isn't, EmmaSun's development team is fully aware of
 the implications on performance this feature will have.
 They decide that careful planing is crucial to offer a reliable and fast
 conversion service.
\end_layout

\begin_layout Standard
As usual, the software architects start to model the new 
\end_layout

\end_body
\end_document
