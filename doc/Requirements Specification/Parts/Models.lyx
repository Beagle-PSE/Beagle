#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass sdqthesis
\use_default_options true
\master ../Requirements Specification.lyx
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Models
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Concludes the SRS.
 At his points, the software is completely specified in regards of requirements
 and attribute descriptions.
\end_layout

\begin_layout Plain Layout
This final chapter now models different viewpoints on how an implementation
 might look like.
 Itâ€™s meant to convey our vision of the software to the reader.
 It is also meant to specify this vision, such that it can lead us through
 the further development phases.
 It does not yet specify technical realisations like UML class diagrams.
\end_layout

\begin_layout Plain Layout
The chapter should contain:
\end_layout

\begin_layout Plain Layout
* Use case descriptions
\end_layout

\begin_layout Plain Layout
* Scenario descriptions
\end_layout

\begin_layout Plain Layout
* User interface draft (not necessarily a drawn one, attribute specifications
 are fine, too)
\end_layout

\end_inset


\end_layout

\begin_layout Section
Scenario 1
\end_layout

\begin_layout Standard
EmmaSun
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
All characters and organisations appearing in this work are fictitious.
 Any resemblance to real persons or companies, living or dead, is purely
 coincidental.
\end_layout

\end_inset

, a Java-based online shop is running on a middle-class web server.
 During the first few years the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glsuserv{system}
\end_layout

\end_inset

 was able to deal with almost 99.8% of incoming requests and orders quite
 well and without any noticeable delay.
 After an enormous expansion since the last year, the number of users is
 currently growing by about 5% per week.
 Although the current servers are designed to fulfil a distinctly higher
 amount of user requests, the administration reported some few dropouts
 as well as increasing waiting times in individual applications.
 Unfortunately, the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glsuserv{system}
\end_layout

\end_inset

 is based on an early design that has grown over the years with missing
 documentation in many cases.
 The effort to completly re-write it is unbearable.
 The code also scales bad, so buying new servers will not solve the problem
 either.
 The only solution seems to re-analyse the software's source code and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glslink{software architecture}{architecture}
\end_layout

\end_inset

 to hopefully find the bottlenecks that can be repaired with least effort.
 EmmaSun's developers have heard of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Palladio}
\end_layout

\end_inset

 and think it could serve them well to overcome their issues.
 Unfortunately, modelling all existing code is such a huge task that the
 management is reluctant to make this step.
\end_layout

\begin_layout Standard
At this point, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Beagle}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SoMoX}
\end_layout

\end_inset

 come into play.
 The team of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{software architect}
\end_layout

\end_inset

 that was commissioned by EmmaSun start to reverse-engineer a complete 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{PCM}
\end_layout

\end_inset

 instance modelling all software 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{component}
\end_layout

\end_inset

 and their 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{SEFF}
\end_layout

\end_inset

 using 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SoMoX}
\end_layout

\end_inset

.
 In conjunction with 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Kieker}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Beagle}
\end_layout

\end_inset

 is then used to conduct measurements on the software's 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{component}
\end_layout

\end_inset

, adding 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{resource demand}
\end_layout

\end_inset

 information to the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{PCM}
\end_layout

\end_inset

.
 After less than two days, the team is able to analyse its software with
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Palladio}
\end_layout

\end_inset

 and run performance predictions for various approaches of improvement.
 The analysis reveals an 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glslink{software architecture}{architectural}
\end_layout

\end_inset

 violation of certain software 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{component}
\end_layout

\end_inset

, which leads to a a huge amount of inter-
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{component}
\end_layout

\end_inset

 calls throughout various hierarchical 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{layer}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
After revising several improvement approaches, EmmaSun's 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{software architect}
\end_layout

\end_inset

 decide to add an extra cache which can store the results of most external
 calls and makes them available almost immediately.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Glsuseri{Palladio}
\end_layout

\end_inset

 predictions suggest that small changes in the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glsuseriii{software architecture}
\end_layout

\end_inset

 adopting these improvements will lead to a much better performance.
 The 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{software architect}
\end_layout

\end_inset

 agree to implement the new design.
\end_layout

\begin_layout Standard
After a two weeks, EmmaSun can already publish first changes that improve
 the shop's performance.
 The development team continues to use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Palladio}
\end_layout

\end_inset

 to model and plan their 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glsuseriii{software architecture}
\end_layout

\end_inset

, leading to further improvements in its code quality and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{QoS}
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Scenario 2
\end_layout

\begin_layout Standard
Two years later, EmmaSun emerged to be an established and much-used online
 shop.
 The last years were busy and EmmaSun constantly hired new developers and
 deployed its software on an evergrowing cluster of servers.
 Because of their good experience with 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Palladio}
\end_layout

\end_inset

, EmmaSun's 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{software architect}
\end_layout

\end_inset

 never stopped to model their software using it.
 Thus, the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glsuseriii{software architecture}
\end_layout

\end_inset

 became more and more sophisticated, increasing EmmaSun's 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{QoS}
\end_layout

\end_inset

 along the way.
\end_layout

\begin_layout Standard
Today, EmmaSun's managers decided to offer a new, ground-breaking feature:
 Automatic audio conversion.
 Any audio piece, no matter whether it is sold on CD, tape, or LP, will
 automatically be offered to users in various digital music formats, from
 high quality FLACs to small 128 kbit/s MP3s.
 While the management is not, EmmaSun's development team is fully aware
 of the implications on performance this feature will have.
 They decide that careful planing is crucial to offer a reliable and fast
 conversion service.
\end_layout

\begin_layout Standard
As usual, the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{software architect}
\end_layout

\end_inset

 start to model the new feature's sub-architecture and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{component}
\end_layout

\end_inset

 in the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{PCM}
\end_layout

\end_inset

.
 They cooperate continuously with the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{system deployer}
\end_layout

\end_inset

 to coordinate the necessary hardware changes.
 After that, the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{component developer}
\end_layout

\end_inset

 start to implement the new 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{component}
\end_layout

\end_inset

.
 They soon realise that there are multiple ways to implement the conversion
 engine.
 Especially, there are different ways to parallelise the task.
 Different developers come up with different approaches, all having their
 advatages and disadvantages.
 The development management soon realises that the effective performance
 will depend highly on the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glsuserii{component}
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glslink{usage context}{usage}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glslink{deployment context}{deployment}
\end_layout

\end_inset

 and cannot be predicted by simple measurements.
 
\end_layout

\begin_layout Standard
To determine the best solution, the developers start to implement a prototype
 for each approach.
 The 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{software architect}
\end_layout

\end_inset

 then import each of these prototypes into 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Palladio}
\end_layout

\end_inset

 using 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SoMoX}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Beagle}
\end_layout

\end_inset

, like they did two years ago.
 In 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Palladio}
\end_layout

\end_inset

, they are able to simulate the load they think the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{system}
\end_layout

\end_inset

 will face on the new servers planned for purchase.
 Using the predictions, they are able to determine which approach will perform
 best for the planned context.
 The development team starts to implement it.
\end_layout

\begin_layout Standard
Four months later, the new feature is almost ready to be launched.
 Most code has been written and basic functionality has been asserted.
 The 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{component developer}
\end_layout

\end_inset

 are mainly fixing minor bugs while the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{system deployer}
\end_layout

\end_inset

 prepare to purchase and install the newly required hardware.
 Meanwhile, the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{software architect}
\end_layout

\end_inset

 import the new code into 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Palladio}
\end_layout

\end_inset

 using 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SoMoX}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Beagle}
\end_layout

\end_inset

 to assure the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glslink{system}{software system}
\end_layout

\end_inset

 will hold the predicted 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{QoS}
\end_layout

\end_inset

.
 When analysing the imported model, they recognise significant differences
 between the initial predictions for the prototype and the ones made for
 the actual implementation.
 The necessity to check copyright violations and content integrity as well
 as making backups and reporting progress to the user resulted in more network
 usage by the conversion 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{component}
\end_layout

\end_inset

 than predicted.
 Fortunately, this bottleneck can be fixed by using better network infrastructur
e hardware.
\end_layout

\begin_layout Standard
When the new conversion feature is implemented, users are astonished by
 its speed.
 EmmaSun's largest competitor, Million Shopping
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
All characters and organisations appearing in this work are fictitious.
 Any resemblance to real persons or companies, living or dead, is purely
 coincidental.
\end_layout

\end_inset

, releases a similar feature soon after.
 But as users start using it, it becomes slower and less reliable over time,
 resulting in unsatisfied customers and sometimes even failed transactions.
 EmmaSun's services, on the other hand, prove to be reliable and scale very
 well.
 A year later, EmmaSun will call the feature one of the main reasons they
 became the world's leading online shop.
 
\end_layout

\end_body
\end_document
