apply plugin: 'java'
defaultTasks 'build'

// Customization of MANIFEST.MF
sourceCompatibility = 1.8
version = '1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'Beagle',
                   'Implementation-Version': version
    }
}

repositories {
	mavenCentral()
}

dependencies {
	testCompile group: 'junit', name: 'junit', version: '4.+'
}

task srs(type: Exec) {
	description 'Renders the Requirements Specification.'
	
	inputs.dir "$projectDir/doc/Requirements Specification"
	outputs.file "$buildDir/doc/Requirements Specification.pdf"
	
	def dest = file("$buildDir/doc/")
	def logdest = file("$buildDir/reports/Requirements Specification Render.log")
	
	workingDir "$projectDir/doc/Requirements Specification/"
	args dest, logdest, 'srs-only'
		
	switch (System.getProperty('os.name').toLowerCase().split()[0]) {
		case 'windows':
			executable 'Render.bat '
    	break
		case 'linux':
    		executable './Render.sh'
    		break
		default:
    		throw new Exception('Sorry, we donâ€™t support your operating system for building the SRS!')
	}
	
	// only print the output for log level info or higher
	logging.captureStandardOutput LogLevel.INFO
}

task srsinstall(type: Exec) {
	description 'Sets up the environment for rendering the srs, but only if the srs is out of date.'	
	
	inputs.dir "$projectDir/doc/Requirements Specification"
	outputs.file "$buildDir/doc/Requirements Specification.pdf"
	
	if (!System.getProperty('os.name').toLowerCase().contains('linux')) {
		throw new Exception('Sorry, we only support linux for automatic setup of the srs render environment. Please refer to doc/Development Setup.md')
	}
	
	workingDir "$projectDir/doc/Requirements Specification/"
	executable './Install.sh'
	
	// only print the output for log level info or higher
	logging.captureStandardOutput LogLevel.INFO
	logging.captureStandardError LogLevel.INFO
}
