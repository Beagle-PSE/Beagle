/**
 * Tasks asserting the code’s quality
 *
 * @author Annika Berger
 * @author Joshua Gleitze
 */
 
configure(javaSubprojects) {
	apply plugin: 'checkstyle'
	apply plugin: 'jacoco'
	
	repositories {
	 	mavenCentral()
	}
	 
	checkstyle {
		toolVersion = "6.11"
	}
	
	jacocoTestReport {
		reports {
			xml.enabled true
			html.destination "$buildDir/reports/jacoco/html"
		}
	}
	
	task verifyNoCheckstyleWarnings(dependsOn: check) {
		description 'Throws if checkstyle warnings were found in a previous checkstyle run.'
	
		def checkstyleWarningsMain = file("$buildDir/reports/checkstyle/main.xml")
		def checkstyleWarningsTest = file("$buildDir/reports/checkstyle/test.xml")
		
		onlyIf {checkstyleWarningsMain.exists() || checkstyleWarningsTest.exists()}
	
		doLast {
			if (checkstyleWarningsMain.exists() && checkstyleWarningsMain.text.contains("<error ")) {
				throw new GradleException("There were checkstyle warnings in src/main!")
			}
			if (checkstyleWarningsTest.exists() && checkstyleWarningsTest.text.contains("<error ")) {
				throw new GradleException("There were checkstyle warnings in src/test!")
			}
		}
	}
	
	
	task verifyTestCoverage(dependsOn: jacocoTestReport) {
		description 'Throws if test code coverage is not 100%.'
	
		def jacocoReport = file("$buildDir/reports/jacoco/test/jacocoTestReport.xml")
		
		onlyIf {jacocoReport.exists()}
	
		doLast {
			if (jacocoReport.text ==~ /.*missed="[^0]".*/) {
				throw new GradleException("Code Coverage by Tests is not 100%!")
			}
		}
	}
	
	// taken from: http://stackoverflow.com/questions/20361942/generate-checkstyle-html-report-with-gradle/20362150#20362150
	task checkstyleHtml {
		description 'Generates a HTML report file for a checkstyle run.'
		
		onlyIf { checkstyleMain.reports.xml.destination.exists() }
		
		ext {
			dest = new File(checkstyleMain.reports.xml.destination.parent, 'main.html')
		}
		
		doLast {
			ant.xslt(in: checkstyleMain.reports.xml.destination,
				style: file("$rootProject.projectDir/config/checkstyle/Checkstyle HTML Render.xsl"),
				out: dest)
	    }
	}
	
	task qc (dependsOn: verifyNoCheckstyleWarnings) {
		group 'Verification'
		description 'Verifies the code’s quality. Fails the build if issues are found.'
	}
	
	checkstyleMain.finalizedBy checkstyleHtml
	
	build.dependsOn jacocoTestReport
}

configure(javaSubprojects - prototypeSubprojects) {
	qc.dependsOn verifyTestCoverage
	
	checkstyleMain.configFile = file("$rootProject.projectDir/config/checkstyle/Checkstyle.xml")
	checkstyleTest.configFile = file("$rootProject.projectDir/config/checkstyle/Checkstyle Test.xml")
}

configure(prototypeSubprojects.intersect(javaSubprojects)){
	checkstyle {
		configFile = file("$rootProject.projectDir/config/checkstyle/Checkstyle Prototype.xml")
	}
}
