#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass sdqthesis
\use_default_options true
\master ../Design and Architecture.lyx
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Graphical User Interface
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Component: Beagle GUI
\end_layout

\begin_layout Plain Layout
- Describe most important classes
\end_layout

\begin_layout Plain Layout
- Give reasons for chosen design
\end_layout

\begin_layout Plain Layout
- Describe chosen design patterns (Model-View-Controller!)
\end_layout

\begin_layout Plain Layout
List all associated packages
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../umlet/GUI.uxf.pdf
	width 100text%
	height 100theight%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
GUI Class Diagram
\end_layout

\end_inset

UML class diagram of the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{GUI}
\end_layout

\end_inset

 classes.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Design
\end_layout

\begin_layout Standard
The 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{GUI}
\end_layout

\end_inset

 follows the Model-View-Controller paradigm.
 It accordingly clearly separates responsibilities: Displaying 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{GUI}
\end_layout

\end_inset

 parts, controlling these parts, setting up the model (Beagle Core), and
 the model itself.
 This leads to a clear flow of information and control.
 Information is stored either locally or in a single object every 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{GUI}
\end_layout

\end_inset

 class knows (the User Configuration) because only the user’s settings need
 to be transported through all objects.
 The user always has control over the analysis because information can be
 transported from the dialog, though the GUI Controller object, to the Beagle
 Controller which can instruct the model.
\end_layout

\begin_layout Section
Control Flow
\end_layout

\begin_layout Standard
GUI Controller is the heart of Beagle’s 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{GUI}
\end_layout

\end_inset

.
 It is responsible to start the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{GUI}
\end_layout

\end_inset

.
 The class controls the flow of actions on the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{GUI}
\end_layout

\end_inset

 and gives control to Beagle Controller once the user started the analysis.
 Beagle Controller is commanded by GUI Controller to start, pause, continue,
 and abort the analysis.
\end_layout

\begin_layout Standard
There are three context menu entries added by Beagle with eclipse extension
 points: One for analysing a complete repository in the package explorer
 and the project explorer on the .repository and .repository_diagram files.
 Another one for analysing a single components in the repository diagram
 on the Basic Component Edit Parts.
 The last one is for analysing a single internal actions in the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SEFF}
\end_layout

\end_inset

 diagram for the Internal Action Edit Parts.
 Each of them has its own Command Handler class, which is handles clicks
 on the context menu entries.
\end_layout

\begin_layout Standard
The GUI Controller is created and called from actions originating from context
 menu clicks.
 The 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{GUI}
\end_layout

\end_inset

 stores all data obtained from the user in the User Configuration.
 Thus, the GUI Controller creates a User Configuration which it from now
 on will be associated with.
 It then creates a new Beagle Analysis Wizard which in return will create
 its Wizard Pages.
 All objects obtain the User Configuration to be able to directly provide
 their gathered information to it.
 Calling GUI Controller’s open() method will display the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{GUI}
\end_layout

\end_inset

 and show the Analysis Wizard, prompting the use for all information necessary
 to perform an analysis.
\end_layout

\begin_layout Standard
After the wizard has finished, control is returned to the GUI Controller
 which will now (concurrently) instruct the Beagle Controller to set up
 the Beagle Core Component.
 To do so, Beagle Controller sets up a Blackboard based on the information
 collected in the User Configuration.
 For example, it uses a PCM Repository Blackboard Factory to translate 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{PCM}
\end_layout

\end_inset

 objects to the affected Measurable 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SEFF}
\end_layout

\end_inset

 Elements.
 The prepared Blackboard is then passed to Beagle Core’s Analysis Controller,
 which will perform the actual analysis.
 
\end_layout

\begin_layout Standard
In the meantime, GUI Controller opens a dialog providing the user with informati
on about the analysis and options to pause, continue or abort the analysis.
 GUI Controller bequeaths these calls the corresponding methods of Beagle
 Controller, which handles the Beagle Core.
 Once the Analysis Controller has finished the analysis, the Beagle Controller
 uses a PCM Writer to write the results back to the PCM files.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../umlet/PCM Connection.uxf.pdf
	width 70text%
	height 100theight%
	keepAspectRatio

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
PCM Translation Class Diagram
\end_layout

\end_inset

Classes used to read from and write to
 
\lang british

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{PCM}
\end_layout

\end_inset

 repository files.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
