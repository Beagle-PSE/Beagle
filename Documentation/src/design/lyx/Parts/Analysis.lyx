#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass sdqthesis
\use_default_options true
\master ../Design and Architecture.lyx
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
The Analysis
\end_layout

\begin_layout Standard
At Beagle’s core, the Analysis Controller controls all analysis activity
 by instructing the Measurement Controller, the Measurement Result Analysers,
 the Proposed Expression Analysers and the Final Judge.
 While not contributing itself, it is charge of all control flow during
 analysis.
\end_layout

\begin_layout Standard
Analysis Controller#perform Analysis performs a complete analysis, starting
 by measuring the examined software, and continuing to analyse until the
 Final Judge reports that the analysis is finished.
 There is always at most one Measurement Tool, Measurement Result Analyser,
 Proposed Expression Analyser or Final Judge having the control flow at
 any given moment during the execution of Analysis Controller#perform Analysis
 (“the analysis loop”).
\end_layout

\begin_layout Standard
An iteration of the analysis loop starts by asking the Measurement Controller
 whether it wants to conduct measurements for the current blackboard state---whi
ch will usually be the case if there is something not yet measured---, and
 if so, calling its #measure method.
 The Measurement Controller will then instruct the Measurement Tools to
 measure.
 Usually, it will tell every tool to measure all new 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SEFF}
\end_layout

\end_inset

 Elements.
\end_layout

\begin_layout Standard
After that, the main loop invokes one arbitrary chosen Measurement Result
 Analyser reporting to be able to contribute to the current blackboard state.
 This analyser may then propose expressions describing the parametric dependenci
es of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SEFF}
\end_layout

\end_inset

 Elements’ measurement results.
 If there is no such analyser, an arbitrary chosen Proposed Expression Analyser
 reporting to be able to contribute will be invoked.
 It may then propose more expressions based on the ones the ones Measurement
 Result Analysers added to the blackboard, usually trying to improve them.
 If there Final Judge will be called.
 It decides whether enough information has been collected and Beagle can
 terminate.
 If this is the case, it also creates or selects the final result for each
 item that has proposed results.
\end_layout

\begin_layout Standard
The analysis loop will then be repeated until the Final Judge was called
 and its #judge method returned true.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Beagle-Controller#perform-Analys"

\end_inset

 sketches the procedure.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../umlet/Controllers.uxf.pdf
	width 90text%
	height 100pheight%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Controller classes
\end_layout

\end_inset

UML class diagram of the controller classes.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithm}[H]
\end_layout

\begin_layout Plain Layout

finished $
\backslash
coloneqq $ false
\backslash
;
\end_layout

\begin_layout Plain Layout


\backslash
;
\end_layout

\begin_layout Plain Layout

romraBlackboardView $
\backslash
coloneqq $ Read-Only Measurement Result Analyser Blackboard View.construct(blackb
oard)
\backslash
;
\end_layout

\begin_layout Plain Layout

mraBlackboardView $
\backslash
coloneqq $ MeasurementController Blackboard View.construct(blackboard)
\backslash
;
\end_layout

\begin_layout Plain Layout

ropeBlackboardView $
\backslash
coloneqq $ Read-Only Proposed Expression Analyser Blackboard View.construct(black
board)
\backslash
;
\end_layout

\begin_layout Plain Layout

peBlackboardView $
\backslash
coloneqq $ Proposed Expressions Blackboard View.construct(blackboard)
\backslash
;
\end_layout

\begin_layout Plain Layout


\backslash
;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
While {$
\backslash
neg $finished} {
\end_layout

\begin_layout Plain Layout

	
\backslash
uIf {measurement controller.can measure(blackboard)} {
\end_layout

\begin_layout Plain Layout

		measurement controller.measure(blackboard)
\backslash
;
\end_layout

\begin_layout Plain Layout

	} 
\backslash
uElseIf {$
\backslash
exists
\backslash
 analyser 
\backslash
in measuremet
\backslash
 result
\backslash
 analysers: analyser.can
\backslash
 contribute(romraBlackboardView)$} {
\end_layout

\begin_layout Plain Layout

		analyser.contribute(mraBlackboardView)
\end_layout

\begin_layout Plain Layout

	} 
\backslash
uElseIf {$
\backslash
exists
\backslash
 analyser 
\backslash
in proposed
\backslash
 expression
\backslash
 analysers: analyser.can
\backslash
 contribute(ropeBlackboardView)$} {
\end_layout

\begin_layout Plain Layout

		analyser.contribute(peBlackboardView)
\end_layout

\begin_layout Plain Layout

	} 
\backslash
Else {
\end_layout

\begin_layout Plain Layout

		finished $
\backslash
coloneqq $ final judge.judge(blackboard)
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithm}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Beagle-Controller#perform-Analys"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Pseudocode of Beagle Controller#perform Analysis()
\end_layout

\end_inset

Beagle Controller#perform Analysis() in pseudocode.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../umlet/Sequence Diagram perform Analysis().uxf.pdf
	width 90text%
	height 100pheight%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Sequence diagram for Analysis Controller#perform Analysis()
\end_layout

\end_inset

An exemplary run of Analysis Controller#perform Analysis() with a concrete
 setup of Analysers.
 Various method calls will be shown in following diagrams.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Measurement
\end_layout

\begin_layout Standard
Measurement Tools are responsible for actually running the software examined
 by Beagle.
 They’ll usually instrument the source code, execute it and collect the
 results from the instrumentation points.
 Because this competence is fundamentally different from analysing 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SEFF}
\end_layout

\end_inset

 Elements, it has a different vocabulary and different business objects.
 The Measurement Controller translates between Measurement Tools and Beagle
 Core.
 For instance, measuring code does not involve any control flow abstraction
 like the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SEFF}
\end_layout

\end_inset

, but operates directly on source code.
 On the other hand, the Analysers require already interpreted results to
 propose expressions for them.
\end_layout

\begin_layout Standard
When the Blackboard is created by PCM Repository Blackboard Factory, all
 Measurable SEFF Elements get a Code Section pointing to where they are
 defined in the source code, as read in from the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{PCM}
\end_layout

\end_inset

 files.
 Based on this information, the Measurement Controller creates a Measurement
 Order.
 This order describes the source code sections Beagle needs information
 about in the language of the Measurement Tools.
 The description is analogous to the Instrumentation Points described in
 
\begin_inset CommandInset citation
LatexCommand cite
key "KrogmannPhD"

\end_inset

, 5.10.2:
\end_layout

\begin_layout Itemize
Before and after each external call, parameter value sections will be put
 on the Measurement Order to capture the transferred and returned parameter’s
 state.
\end_layout

\begin_layout Itemize
An execution section will be added to the Measurement Order for each branch
 in a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SEFF condition}
\end_layout

\end_inset

 (represented by one SEFF Branch) to determine which branch was executed.
\end_layout

\begin_layout Itemize
An execution section will be created for the body of every 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SEFF loop}
\end_layout

\end_inset

, to count how often it will be executed.
\end_layout

\begin_layout Itemize
For each Resource Demanding Internal Action, a resource demand section will
 be created to measure the resource demands of that action and type.
\end_layout

\begin_layout Standard
The order also contains Launch Configurations that can be used to run the
 examined software’s code.
 These launch configurations are provided by the user.
 They are not Eclipse’s launch configurations, although an adapter to them
 would make a good implementation of Launch Configuration.
\end_layout

\begin_layout Standard
When receiving the order, Measurement Tools can instrument the source code
 based on this information.
 Executing the instrumented code (through the Launch Configurations) hence
 gives them information about the executed code sections.
 They give this information back in the form of a list of Measurement Events
 ordered by the time they occurred.
 The Measurement Controller has no expectations about what a Measurement
 Tool can measure, tools are allowed to support only a subset of the instrumenta
tion instructions on the Measurement Order.
 A measurement can also lead to no Measurement Events at all, for example
 because of a Launch Configuration only running code the user is not interested
 in.
\end_layout

\begin_layout Standard
The Measurement Controller then uses a Measurement Event Parser to create
 Para\SpecialChar \-
met\SpecialChar \-
erisa\SpecialChar \-
tion-Dependent Measurement Results that Measurement Result
 Analysers can operate on out of the captured Measurement Events:
\end_layout

\begin_layout Itemize
The last consecutive occurrences of Parameter Value Captured Events from
 the same code section sets the parameterisation for all following results.
 If the events occur after an External Call, they are used to create a Parameter
 Change Measurement Result.
\end_layout

\begin_layout Itemize
The sum of consecutive executions of a SEFF Loop’s body is used to create
 a Loop Repetition Count Measurement Result.
\end_layout

\begin_layout Itemize
Which code section was executed determines the branch index for the created
 Branch Decision Measurement Result.
\end_layout

\begin_layout Itemize
A Resource Demand Captured Event can directly be translated to a Resource
 Demand Measurement Result.
\end_layout

\begin_layout Standard
The Measurable SEFF Elements the created Para\SpecialChar \-
met\SpecialChar \-
erisa\SpecialChar \-
tion-Dependent Measurement
 Results will be assigned to are determined by the code sections the Measurement
 Events occurred for.
\end_layout

\begin_layout Standard
The measurement order also provides a Parameter Characteriser, Measurement
 Tools shall use to characterise parameters in parameter value sections.
 This functionality, including the Parameterisation and Parameter Characterisati
on classes, is intentionally only sketched in the current design.
 Implementing them is out of this project’s scope and will only be targeted
 if time is left after implementing Beagle’s mandatory requirements.
 However, they are included in the class diagram to show that the functionality
 will seamlessly integrate into the design.
 
\end_layout

\begin_layout Standard
The first implementation of a Measurement Tool will be an adapter to the
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glslink{Kieker}{Kieker performance monitoring framework}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../umlet/Measurement.uxf.pdf
	width 100text%
	height 100theight%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Measurement Class Diagram
\end_layout

\end_inset

Classes involved in Measurement.
 Classes on the left hand side belong to Beagle Core’s View, classes on
 the left hand to Measurement Tools’ view.
 Classes in the centre are used by both sides or translate between the views.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../umlet/Sequence Diagram can measure().uxf.pdf
	width 100text%
	height 100pheight%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Sequence diagram for Measurement Controller#can measure()
\end_layout

\end_inset

An exemplary run of Measurement Controller#can measure(), checking whether
 there are new SEFF Elements to be measured.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../umlet/Sequence Diagram measure().uxf.pdf
	width 100text%
	height 100pheight%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Sequence diagram for Measurement Controller#measure()
\end_layout

\end_inset

An exemplary run of Measurement Controller#measure, preparing the Measurement
 Order and commissioning it to the registered Measurement Tools.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Analysers
\end_layout

\begin_layout Standard
Measurement Result Analysers and Proposed Expression Analysers (“Analysers
\begin_inset Quotes erd
\end_inset

) are not limited in their functionality.
 There exist many different approaches to analyse parametric dependencies,
 all having their advantages and disadvantages.
 Especially if Krogmann’s genetic programming approach is implemented (as
 a Proposed Expression Analyser), more, different Analysers may drastically
 improve the final result and the computation time needed to find it 
\begin_inset CommandInset citation
LatexCommand cite
key "KrogmannPhD"

\end_inset

.
 The Final Judge will always pick the best result (in regard of the Fitness
 Function) and no proposed expression is ever deleted, so the result can
 only get better by adding more analysers.
\end_layout

\begin_layout Standard
Analysers have to carefully implement their #can contribute() methods.
 There intentionally exist very little restrictions to when and how often
 an Analyser may run to not restrict the variety of approaches that can
 be implemented.
 However, Analysers have to make sure that the analysis can terminate.
 This is especially crucial with multiple analysers, all constantly generating
 new results.
 It can be achieved by regularly not contributing, and hence letting the
 Final Judge decide from time to time.
 The Final Judge will not terminate the analysis if there is reasonable
 hope for a better result, so analysers are likely to be called again after
 returning false in their #can contribute method.
\end_layout

\begin_layout Standard
The first implementation will include a Measurement Result Analyser proposing
 all measurement results as a Constant Expression and a Proposed Expression
 Analyser proposing the average of all proposed Constant Expressions.
 These will still be useful when implementing more complex analysers like
 the genetic analyser.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../umlet/Sequence Diagram Measurement Result Analyser_contribute().uxf.pdf
	width 100text%
	height 100pheight%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Sequence diagram for Measurement Result Analyser#contribute()
\end_layout

\end_inset

An exemplary run of Measurement Result Analyser#contribute() for a Measurement
 Result Analyser contributing the measurement results’s values as Constant
 Expressions.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../umlet/Sequence Diagram Proposed Expression Analyser_contribute().uxf.pdf
	width 100text%
	height 100pheight%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Sequence diagram for Proposed Expression Analyser#contribute()
\end_layout

\end_inset

An exemplary run of Proposed Expression Analyser#contribute() for a Proposed
 Expression Analyser contributing the average of all Constant Expressions
 proposed for a SEFF Element.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Final Judge
\end_layout

\begin_layout Standard
The Final Judge is in charge of deciding when to end the analysis.
 As explained above, this is not trivial, as stopping it to soon will likely
 generate bad results.
 Therefore, it will apply a combination of heuristics, including how much
 the best and average result improved in the last analysis iterations, how
 long the analysis is running, how many optimal results have been found,
 etcetera.
 Prompting users is an option, too.
 There are only two cases in which the analysis will be ended immediately:
\end_layout

\begin_layout Itemize
All Measurable SEFF Elements have an optimal proposed Evaluable Expression
 on the Blackboard, or
\end_layout

\begin_layout Itemize
The Measurement Controller, all Measurement Result Analysers and all Proposed
 Expression Analysers returned false in their #can measure or #can contribute
 method in the last iteration of the analysis loop.
\end_layout

\begin_layout Standard
The Final Judge grades Evaluable Expressions based on a fitness function.
 Because analysers may use a fitness function to generate better results,
 the it is available to them from the Blackboard.
 The Final Judge will always pick the proposed expression graded best for
 the final expression.
 If there are multiple such expressions, is it undefined which one will
 be chosen.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../umlet/Sequence Diagram judge().uxf.pdf
	width 100text%
	height 100pheight%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Sequence diagram for Final Judge#judge()
\end_layout

\end_inset

Exemplary run of Final Judge#judge().
 Two expressions have been proposed for a Resource Demanding Internal Action
 having one Measurement Result of its CPU usage.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
