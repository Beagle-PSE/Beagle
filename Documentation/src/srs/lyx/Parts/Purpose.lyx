#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass sdqthesis
\use_default_options true
\master ../Requirements Specification.lyx
\maintain_unincluded_children false
\language british
\language_package babel
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Purpose and Goals
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
This part is a general introduction for the reader.
 It is written in continuous text.
\end_layout

\begin_layout Plain Layout
The reader should be introduced in the general conditions that make this
 software useful.
\end_layout

\begin_layout Plain Layout
It should explain the starting point (i.e.
 analysis of component-based software & reverse engineering of the model
 from source code), the shortcomings and challenge (i.e.
 no resource demand annotations), and how our software will try to solve
 that.
\end_layout

\begin_layout Plain Layout
It can be regarded as the document’s abstract.
 Therefore, it should give the reader an overview about what this software
 is going to do, such that he will have no surprises when reading the following
 chapters.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When developing software, specifying its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glslink{software architecture}{architecture}
\end_layout

\end_inset

 in a sophisticated way is a crucial, yet challenging task.
 Decisions made at this point highly influence the software's 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{QoS}
\end_layout

\end_inset

, but are usually difficult to change, as redesigns may be costly 
\begin_inset CommandInset citation
LatexCommand cite
key "PCMtechreport"

\end_inset

.
 To prevent poor design in the first place, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Palladio}
\end_layout

\end_inset

, a model-driven approach for software simulation, enables developers to
 analyse 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glsuserii{component-based software}
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{QoS}
\end_layout

\end_inset

 during the definition phase before actually writing any code.
 Using 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Palladio}
\end_layout

\end_inset

, all parties involved in the development of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{component-based software}
\end_layout

\end_inset

 model their domain in the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{PCM}
\end_layout

\end_inset

.
 This information is then used to simulate the software's behaviour with
 a focus on its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{QoS}
\end_layout

\end_inset

 attributes.
\end_layout

\begin_layout Standard
In many scenarios, however, some to all source code may already exist.
 Analysis with 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Palladio}
\end_layout

\end_inset

 might still be desired: For example to simulate a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glsuseri{component}
\end_layout

\end_inset

 interaction with a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glsuserv{system}
\end_layout

\end_inset

 or to freshly start analysing existing software.
 For such cases, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SoMoX}
\end_layout

\end_inset

, a software for static source code analysis, allows users to re-engineer
 their 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glsuseriii{software architecture}
\end_layout

\end_inset

 into a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{PCM}
\end_layout

\end_inset

.
 The results contain the software's 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{component}
\end_layout

\end_inset

 boundaries, their bindings to the provided source code, and their 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SEFF}
\end_layout

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "KrogmannPhD"

\end_inset

.
 Unfortunately, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glsuseri{SoMoX}
\end_layout

\end_inset

 static approach does not allow it to determine the software's 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{resource demand}
\end_layout

\end_inset

, which are essential for performance analysis.
\end_layout

\begin_layout Standard
\begin_inset CommandInset citation
LatexCommand cite
key "KrogmannPhD"

\end_inset

 also describes 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Beagle}
\end_layout

\end_inset

, an approach for dynamic source code analysis to complement 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SoMoX}
\end_layout

\end_inset

.
 It aims to conduct performance measurements on software’s source code in
 order to determine its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glsuseri{component}
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{internal action}
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{resource demand}
\end_layout

\end_inset

.
 Adding this information to the software's 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{PCM}
\end_layout

\end_inset

 enables developers to import their software into 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Palladio}
\end_layout

\end_inset

 with minimal effort.
 The purpose of this project is to implement 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Beagle}
\end_layout

\end_inset

.
 Based on the foundations in 
\begin_inset CommandInset citation
LatexCommand cite
key "KrogmannPhD"

\end_inset

, it aims to develop a piece of software adding dynamic properties to a
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{PCM}
\end_layout

\end_inset

 using contemporary 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{measurement software}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
It's important do understand the difference between simple performance measureme
nts and the detection of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{resource demand}
\end_layout

\end_inset

.
 While the first one simply determines how long a piece of code need to
 execute a given task on a given machine, the latter respects the implications
 of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{component-based software architecture}
\end_layout

\end_inset

.
 This means 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Beagle}
\end_layout

\end_inset

 tries to gain 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{resource demand}
\end_layout

\end_inset

 information that is independent from a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glsuseri{component}
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glslink{usage context}{usage}
\end_layout

\end_inset

,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glslink{deployment context}{deployment}
\end_layout

\end_inset

, and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{assembly context}
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Criteria
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Specifies criteria our software must fulfil to be considered a success.
\end_layout

\begin_layout Plain Layout
Keep in mind to only specify the 
\emph on
minimum
\emph default
 amount of requirements to make the software useful.
 That means that any criterion not 
\emph on
required
\emph default
 to give the software a right to exist should go into the nice to have part.
\end_layout

\begin_layout Plain Layout
But be nonetheless precise and leave nothing out.
 
\end_layout

\begin_layout Plain Layout
Make sure to differentiate these criteria and the requirements! The criteria
 listed here a bullet points for features and are most of the time not measurabl
e (but surely verifiable!).
 They are what a non-IT client would specify.
 Requirements, on the other hand, are quantified, measurable atomic feature
 descriptions.
\end_layout

\begin_layout Plain Layout
Reference notation is /C#/
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Mandatory
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset CommandInset label
LatexCommand label
name "/P10/"

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Beagle}
\end_layout

\end_inset

 enables users to analyse given source code regarding the resources its
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{internal action}
\end_layout

\end_inset

 demand when executed.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset CommandInset label
LatexCommand label
name "/P20/"

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Beagle}
\end_layout

\end_inset

 annotates its 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{resource demand}
\end_layout

\end_inset

 findings in a given instance of the software's 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{PCM}
\end_layout

\end_inset

, enabling users to import existing software into 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Palladio}
\end_layout

\end_inset

 for analysis.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Note Note
status open

\begin_layout Plain Layout
Complements the above part.
 Criteria listed here don’t need to be matched for the software to be successful.
\end_layout

\begin_layout Plain Layout
This part should be visionary and state as many features that would add
 additional value to the software.
 It should also prove that we made up our minds about our software and can
 exactly imagine its usefulness.
 Criteria specified here may also be implemented by others, long after we've
 finished our project.
\end_layout

\begin_layout Plain Layout
Reference notation is /OC#/
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Optional
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset CommandInset label
LatexCommand label
name "/OP10/"

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Beagle}
\end_layout

\end_inset

 analyses consigned source code for further dynamic behavioural attributes
 like the number of loop executions in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{SEFF loop}
\end_layout

\end_inset

 and the probability for branches in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{SEFF condition}
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset CommandInset label
LatexCommand label
name "/OP20/"

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Beagle}
\end_layout

\end_inset

 outputs the results as a function of the input parameters of the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{internal action}
\end_layout

\end_inset

 as 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{resource demand}
\end_layout

\end_inset

 annotations in the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{PCM}
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset CommandInset label
LatexCommand label
name "/OP30/"

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Beagle}
\end_layout

\end_inset

 offers users a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{GUI}
\end_layout

\end_inset

 to control the analysis .
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename UML Diagrams/Use Cases.uxf.pdf
	width 100text%
	height 100pheight%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
UML Use Case Diagram
\end_layout

\end_inset

UML Use Case Diagram.
 Optional features are drawn grey.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Boundary
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
This part concludes this chapter’s thought of train.
\end_layout

\begin_layout Plain Layout
Having specified what our software must and should do, we now specify what
 will never be its purpose.
 Any good definition does not only include, but also exclude features.
 This chapter does further prove that we exactly understand what our software
 is – and what it’s not.
\end_layout

\begin_layout Plain Layout
Reference notation is /B#/
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset CommandInset label
LatexCommand label
name "/B10/"

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Beagle}
\end_layout

\end_inset

 does not perform actual measurements on source code.
 This is done by other software like 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Kieker}
\end_layout

\end_inset

.
 Their results are transferred to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Beagle}
\end_layout

\end_inset

 using the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{CTA}
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset CommandInset label
LatexCommand label
name "/B20/"

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Beagle}
\end_layout

\end_inset

 does not reconstruct a model of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glsuseriii{software architecture}
\end_layout

\end_inset

 from its source code.
 This is done by other software like 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SoMoX}
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset CommandInset label
LatexCommand label
name "/B30/"

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Beagle}
\end_layout

\end_inset

 does not reconstruct the internal structure of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
glspl{component}
\end_layout

\end_inset

 like their 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SEFF}
\end_layout

\end_inset

.
 This is done by other tools like 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{SoMoX}
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset CommandInset label
LatexCommand label
name "/B40/"

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Beagle}
\end_layout

\end_inset

 does not assert that analysis of source code written in a language other
 than Java 6 is possible.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset CommandInset label
LatexCommand label
name "/B50/"

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Beagle}
\end_layout

\end_inset

 does neither do performance analysis nor prediction.
 That is may be achieved with 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
gls{Palladio}
\end_layout

\end_inset

.
\end_layout

\end_body
\end_document
